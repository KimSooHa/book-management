name: Gradle CI/CD with Docker

on:
  push:
    branches:
      - master  # master 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - master # master 브랜치에 pull Request가 열릴 때 실행

jobs:
  build:
    runs-on: ubuntu-latest  # CI 환경으로 Ubuntu 사용

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 1. 코드 체크아웃(저장소의 코드를 Github Actions 환경으로 가져옴)

      - name: Set up JDK
        uses: actions/setup-java@v3 # 2. JDK 설정
        with:
          distribution: 'temurin'  # OpenJDK 배포판
          java-version: '11'       # 사용하려는 Java 버전

      - name: Cache Gradle dependencies
        uses: actions/cache@v3 # 3. Gradle 캐시 설정(Gradle 의존성을 캐싱하여 빌드시간 단축)
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew build  # Gradle 빌드 명령 실행

      - name: Login to DockerHub
        uses: docker/login-action@v2  # 5. GitHub Actions에서 DockerHub에 로그인
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}  # DockerHub 사용자명
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}  # DockerHub 비밀번호

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4 # 6. Docker 이미지 빌드 및 푸시
        with:
          context: . # Dockerfile이 있는 경로
          push: true # 이미지를 빌드한 뒤 DockerHub에 자동으로 업로드
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/book-app:latest

      # 7. SSH를 통해 AWS EC2에 배포
      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.6 # EC2 원격접속
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            # MariaDB 접속 정보 환경변수 설정            
            export DB_HOST=mariadb  # Docker Compose에서 MariaDB 서비스 이름
            export DB_USER=${{ secrets.DB_USER }}  # DB 사용자
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}  # DB 비밀번호
            export DB_NAME=${{ secrets.DB_NAME }}  # DB 이름
            export SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }}
      
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/book-app:latest
            docker ps -a | grep book-app && docker stop book-app || true
            docker ps -a | grep book-app && docker rm book-app || true
            docker run -d --name book-app --network docker-mysql_mynetwork -p 8083:8083 --restart always \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE \
              ${{ secrets.DOCKER_HUB_USERNAME }}/book-app:latest